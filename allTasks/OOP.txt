Конструктор класу
Задача 1:
Умова: Створіть клас Person, який має конструктор для ініціалізації 
імені та віку особи. Додайте метод greet, який виводить привітання 
у форматі "Привіт, я [ім'я] і мені [вік] років."

class Person {
  constructor() {
    // Конструктор
  }

  greet() {
    // Реалізуйте цей метод
  }
}

// Приклад використання:
// const person = new Person('Оля', 30);
// person.greet(); // "Привіт, я Оля і мені 30 років."

Задача 2:
Умова: Реалізуйте клас Rectangle, який має конструктор для ініціалізації 
ширини та висоти. Клас повинен мати методи getArea, що повертає площу 
прямокутника (ширина × висота), і getPerimeter, що повертає периметр 
прямокутника (2 × (ширина + висота)).

class Rectangle {
  constructor() {
    // Конструктор
  }

  getArea() {
    // Площа прямокутника: width × height
  }

  getPerimeter() {
    // Периметр прямокутника: 2 × (width + height)
  }
}

// Приклад використання:
// const rect = new Rectangle();
// rect.width = 10;
// rect.height = 5;
// console.log(rect.getArea()); // 50
// console.log(rect.getPerimeter()); // 30

Прототип екземпляру
Задача 3:
Умова: Створіть конструктор функцію Car, яка приймає модель та рік 
випуску. Додайте метод getInfo до прототипу, який повертає рядок у 
форматі "Модель: [модель], Рік випуску: [рік]".

function Car() {
  // Конструктор
}

Car.prototype.getInfo = function() {
  // Реалізуйте цей метод
};

// Приклад використання:
// const car = new Car('Toyota', 2022);
// console.log(car.getInfo()); // "Модель: Toyota, Рік випуску: 2022"

Задача 4:
Умова: Створіть конструктор функцію Animal, що приймає ім'я тварини. Додайте 
метод makeSound до прототипу, який виводить звук, що видає тварина, 
наприклад, "Meow" або "Woof".

function Animal() {
  // Конструктор
}

Animal.prototype.makeSound = function() {
  // Реалізуйте цей метод
};

// Приклад використання:
// const animal = new Animal('Cat');
// animal.makeSound(); // "Meow" (для кота)

Приватні властивості
Задача 5:
Умова: Створіть клас BankAccount з приватною властивістю для балансу. Реалізуйте 
методи deposit та withdraw, які відповідно додають (баланс += сума) та знімають 
(баланс -= сума) гроші з рахунку, а також метод getBalance, який повертає 
поточний баланс.

class BankAccount {
  #balance = 0;

  constructor() {
    // Конструктор
  }

  deposit(amount) {
    // Додайте суму до балансу
  }

  withdraw(amount) {
    // Зніміть суму з балансу
  }

  getBalance() {
    // Повертає поточний баланс
  }
}

// Приклад використання:
// const account = new BankAccount();
// account.deposit(100);
// console.log(account.getBalance()); // 100
// account.withdraw(50);
// console.log(account.getBalance()); // 50

Задача 6:
Умова: Реалізуйте клас User, у якому є приватна властивість password. 
Реалізуйте методи setPassword, який встановлює пароль, і checkPassword, 
який перевіряє, чи правильний введений пароль.

class User {
  #password = '';

  constructor() {
    // Конструктор
  }

  setPassword(password) {
    // Встановіть пароль
  }

  checkPassword(password) {
    // Перевірте, чи правильний пароль
  }
}

// Приклад використання:
// const user = new User();
// user.setPassword('secret');
// console.log(user.checkPassword('secret')); // true

Гетери та сетери
Задача 7:
Умова: Реалізуйте клас Person з приватною властивістю age. Додайте гетер age, 
який повертає вік, та сетер age, який дозволяє встановлювати вік, при 
цьому вік повинен бути невід’ємним числом.

class Person {
  #age = 0;

  constructor() {
    // Конструктор
  }

  get age() {
    // Повертає вік
  }

  set age(value) {
    // Встановлює вік
  }
}

// Приклад використання:
// const person = new Person();
// person.age = 25;
// console.log(person.age); // 25

Задача 8:
Умова: Створіть клас Temperature, у якого є приватна властивість celsius. 
Реалізуйте гетер fahrenheit, який повертає температуру в градусах Фаренгейта 
(градуси Фаренгейта = градуси Цельсія × 9/5 + 32), та сетер fahrenheit, який 
дозволяє встановлювати температуру у градусах Фаренгейта 
(градуси Цельсія = (градуси Фаренгейта - 32) × 5/9).

class Temperature {
  #celsius = 0;

  constructor() {
    // Конструктор
  }

  get fahrenheit() {
    // Перетворює градуси Цельсія в градуси Фаренгейта
  }

  set fahrenheit(value) {
    // Перетворює градуси Фаренгейта в градуси Цельсія
  }
}

// Приклад використання:
// const temp = new Temperature();
// temp.fahrenheit = 32;
// console.log(temp.fahrenheit); // 32

Метод super
Задача 9:
Умова: Створіть клас Animal з методом speak, який виводить "Тварина говорить". 
Створіть клас Dog, який наслідує від Animal і перевизначає метод speak, щоб виводити 
"Собака гавкає". Переконайтеся, що метод speak з базового класу також викликається.

class Animal {
  speak() {
    console.log('Тварина говорить');
  }
}

class Dog extends Animal {
  constructor() {
    super();
    // Конструктор
  }

  speak() {
    super.speak();
    console.log('Собака гавкає');
  }
}

// Приклад використання:
// const dog = new Dog();
// dog.speak(); // "Тварина говорить" та "Собака гавкає"

Задача 10:
Умова: Реалізуйте клас Shape з методом area, що повертає площу. Реалізуйте клас Circle, 
який наслідує від Shape, і перевизначає метод area, щоб повертати площу кола 
(площа = π × радіус²). Переконайтеся, що метод area з базового класу також викликається 
для розрахунку площі.

class Shape {
  area() {
    // Реалізуйте цей метод
  }
}

class Circle extends Shape {
  constructor(radius) {
    super();
    this.radius = radius;
    // Конструктор
  }

  area() {
    // Площа кола: π × радіус²
    return Math.PI * Math.pow(this.radius, 2);
  }
}

// Приклад використання:
// const circle = new Circle(5);
// console.log(circle.area()); // Площа кола