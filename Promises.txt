1. Таймер на промисах
Задача: Напишите функцию, которая возвращает промис, разрешающийся через определённое количество миллисекунд.
Подсказка: Используйте setTimeout внутри промиса для создания задержки.

2. Цепочка промисов
Задача: Создайте цепочку промисов, где каждый следующий промис разрешается через одну секунду, выводя сообщение в консоль.
Подсказка: Используйте .then() для создания цепочек промисов. Здесь важно знать, что каждый .then() возвращает новый промис.

3. Множественные промисы
Задача: Создайте три промиса, каждый из которых разрешается через разное количество времени. Используйте Promise.all, чтобы выполнить их параллельно и вывести результат, когда они все завершатся.
Совет: Используйте Promise.all, если хотите дождаться выполнения всех промисов. Он полезен, когда нужно выполнять несколько задач одновременно и дождаться результата всех сразу.

4. Promise.race
Задача: Создайте два промиса, один разрешается через 3 секунды, а второй через 5 секунд. Используйте Promise.race, чтобы вывести результат самого быстрого промиса.
Совет: Promise.race позволяет узнать результат самого первого завершившегося промиса. Это полезно, когда нужно обрабатывать результат как можно быстрее, не дожидаясь всех.

5. Обработка ошибок
Задача: Создайте промис, который иногда завершает выполнение с ошибкой. Реализуйте цепочку .then() и .catch() для обработки успешного и неудачного выполнения промиса.
Совет: Используйте .catch() для обработки ошибок. Это удобно, так как catch перехватывает ошибки, возникающие на любом этапе цепочки промисов.

6. Асинхронное получение данных
Задача: Напишите функцию, которая возвращает промис, симулирующий получение данных с сервера через 2 секунды. Используйте setTimeout для задержки.
Совет: Используйте промис для имитации работы с асинхронными запросами. В реальных приложениях асинхронные операции часто используются для работы с сетью.

7. Создание промиса внутри функции
Задача: Напишите функцию, которая принимает число и возвращает промис. Промис разрешается, если число чётное, и отклоняется, если число нечётное.
Совет: В промисе для управления его результатом используйте resolve и reject. resolve возвращает успешный результат, а reject сигнализирует об ошибке.

8. Задержка перед выполнением
Задача: Напишите функцию, которая возвращает промис, разрешающийся через 3 секунды, и после этого выводит сообщение в консоль.
Совет: Используйте setTimeout внутри промиса для создания задержки и выводите сообщение в .then(), чтобы дождаться выполнения.

9. Очередность выполнения промисов
Задача: Создайте несколько промисов, которые разрешаются через разное время, и с помощью Promise.allSettled обработайте их результаты, даже если один из них завершится ошибкой.
Совет: Используйте Promise.allSettled, если вам важно дождаться всех промисов, даже если некоторые из них завершились с ошибкой. Это полезно, когда нужно обработать все результаты, успешные и неуспешные.

10. Промис с условием
Задача: Напишите функцию, которая принимает два числа и возвращает промис. Промис разрешается, если первое число больше второго, и отклоняется, если меньше или равно.
Совет: Для проверки условия используйте простое сравнение внутри промиса. В зависимости от результата вызывайте либо resolve, либо reject.